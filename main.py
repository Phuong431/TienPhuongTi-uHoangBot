from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import sqlite3
from datetime import datetime
import schedule
import threading
import time

# Thay YOUR_BOT_TOKEN b·∫±ng token API c·ªßa b·∫°n
TOKEN = "8156843536:AAHSfCPba2XjcRdoFKEF378E2sp9WAMMY0Q"

# K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu SQLite
conn = sqlite3.connect("expenses.db", check_same_thread=False)
cursor = conn.cursor()

# T·∫°o b·∫£ng l∆∞u th√¥ng tin thu chi
cursor.execute('''
CREATE TABLE IF NOT EXISTS expenses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    description TEXT,
    amount REAL,
    type TEXT,
    created_at TEXT
)
''')
conn.commit()

# L·ªánh /start: Ch√†o m·ª´ng ng∆∞·ªùi d√πng
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "Xin ch√†o! T√¥i l√† bot qu·∫£n l√Ω thu chi.\n"
        "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh sau ƒë·ªÉ qu·∫£n l√Ω t√†i ch√≠nh:\n"
        "‚Ä¢ /add [thu/chi] [s·ªë ti·ªÅn] [m√¥ t·∫£] - Th√™m kho·∫£n thu/chi\n"
        "‚Ä¢ /view - Xem t·ªïng thu/chi h√¥m nay\n"
        "‚Ä¢ /report - Xem b√°o c√°o t·ªïng thu/chi th√°ng n√†y\n"
        "‚Ä¢ /delete [ID] - X√≥a kho·∫£n thu/chi\n"
    )

# L·ªánh /add: Th√™m kho·∫£n thu/chi
def add_expense(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    args = context.args

    if len(args) < 3:
        update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: /add [thu/chi] [s·ªë ti·ªÅn] [m√¥ t·∫£].")
        return

    try:
        type = args[0].lower()
        amount = float(args[1])
        description = " ".join(args[2:])
        created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        if type not in ["thu", "chi"]:
            update.message.reply_text("‚ö†Ô∏è Lo·∫°i ph·∫£i l√† 'thu' ho·∫∑c 'chi'.")
            return

        cursor.execute('''
        INSERT INTO expenses (user_id, description, amount, type, created_at)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, description, amount, type, created_at))
        conn.commit()

        update.message.reply_text(
            f"‚úÖ ƒê√£ ghi nh·∫≠n: {type.upper()} {amount:,.0f} VND - {description} (L√∫c: {created_at})."
        )

    except ValueError:
        update.message.reply_text("‚ö†Ô∏è S·ªë ti·ªÅn ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá.")

# L·ªánh /view: Xem t·ªïng thu/chi h√¥m nay
def view_today(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    today = datetime.now().strftime("%Y-%m-%d")

    cursor.execute('''
    SELECT type, SUM(amount) FROM expenses
    WHERE user_id = ? AND DATE(created_at) = ?
    GROUP BY type
    ''', (user_id, today))
    data = cursor.fetchall()

    if not data:
        update.message.reply_text("üìÖ H√¥m nay b·∫°n ch∆∞a c√≥ kho·∫£n thu/chi n√†o.")
        return

    message = "**üìÖ T·ªïng thu/chi h√¥m nay:**\n"
    for row in data:
        message += f"‚Ä¢ {row[0].capitalize()}: {row[1]:,.0f} VND\n"
    update.message.reply_text(message, parse_mode="Markdown")

# L·ªánh /report: B√°o c√°o t·ªïng thu/chi th√°ng n√†y
def report_monthly(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    current_month = datetime.now().strftime("%Y-%m")

    cursor.execute('''
    SELECT type, SUM(amount) FROM expenses
    WHERE user_id = ? AND strftime('%Y-%m', created_at) = ?
    GROUP BY type
    ''', (user_id, current_month))
    data = cursor.fetchall()

    if not data:
        update.message.reply_text("üìä B·∫°n ch∆∞a c√≥ kho·∫£n thu/chi n√†o trong th√°ng n√†y.")
        return

    message = "**üìä B√°o c√°o thu/chi th√°ng n√†y:**\n"
    for row in data:
        message += f"‚Ä¢ {row[0].capitalize()}: {row[1]:,.0f} VND\n"
    update.message.reply_text(message, parse_mode="Markdown")

# L·ªánh /delete: X√≥a kho·∫£n thu/chi
def delete_expense(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    args = context.args

    if len(args) != 1 or not args[0].isdigit():
        update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID kho·∫£n chi c·∫ßn x√≥a. V√≠ d·ª•: /delete 1")
        return

    expense_id = int(args[0])
    cursor.execute('''
    DELETE FROM expenses WHERE id = ? AND user_id = ?
    ''', (expense_id, user_id))
    conn.commit()

    if cursor.rowcount == 0:
        update.message.reply_text(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kho·∫£n thu/chi v·ªõi ID {expense_id}.")
    else:
        update.message.reply_text(f"‚úÖ ƒê√£ x√≥a kho·∫£n thu/chi v·ªõi ID {expense_id}.")

# T·ª± ƒë·ªông b√°o c√°o t·ªïng thu/chi m·ªói ng√†y v√† cu·ªëi th√°ng
def daily_summary():
    today = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("SELECT DISTINCT user_id FROM expenses")
    users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        cursor.execute('''
        SELECT type, SUM(amount) FROM expenses
        WHERE user_id = ? AND DATE(created_at) = ?
        GROUP BY type
        ''', (user_id, today))
        data = cursor.fetchall()

        if data:
            message = "**üìÖ B√°o c√°o thu/chi h√¥m nay:**\n"
            for row in data:
                message += f"‚Ä¢ {row[0].capitalize()}: {row[1]:,.0f} VND\n"
            updater.bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown")

def monthly_summary():
    current_month = datetime.now().strftime("%Y-%m")
    cursor.execute("SELECT DISTINCT user_id FROM expenses")
    users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        cursor.execute('''
        SELECT type, SUM(amount) FROM expenses
        WHERE user_id = ? AND strftime('%Y-%m', created_at) = ?
        GROUP BY type
        ''', (user_id, current_month))
        data = cursor.fetchall()

        if data:
            message = "**üìä B√°o c√°o t·ªïng thu/chi th√°ng n√†y:**\n"
            for row in data:
                message += f"‚Ä¢ {row[0].capitalize()}: {row[1]:,.0f} VND\n"
            updater.bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown")

# L·∫≠p l·ªãch b√°o c√°o t·ª± ƒë·ªông
def schedule_tasks():
    schedule.every().day.at("00:00").do(daily_summary)  # 7h s√°ng Vi·ªát Nam
    schedule.every().month.at("23:00").do(monthly_summary)

    while True:
        schedule.run_pending()
        time.sleep(1)

# Ch·∫°y bot
updater = Updater(TOKEN, use_context=True)
dispatcher = updater.dispatcher

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("add", add_expense))
dispatcher.add_handler(CommandHandler("view", view_today))
dispatcher.add_handler(CommandHandler("report", report_monthly))
dispatcher.add_handler(CommandHandler("delete", delete_expense))

threading.Thread(target=schedule_tasks, daemon=True).start()
updater.start_polling()
updater.idle()
